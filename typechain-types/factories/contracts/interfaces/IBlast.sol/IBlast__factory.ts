/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IBlast,
  IBlastInterface,
} from "../../../../contracts/interfaces/IBlast.sol/IBlast";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "claimAllGas",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "claimMaxGas",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "configureClaimableGas",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IBlast__factory {
  static readonly abi = _abi;
  static createInterface(): IBlastInterface {
    return new Interface(_abi) as IBlastInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IBlast {
    return new Contract(address, _abi, runner) as unknown as IBlast;
  }
}
