/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SSSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ANTI_BOT_DETECT_DURATION"
      | "ANTI_BOT_LOCK_DURATION"
      | "DOMAIN_SEPARATOR"
      | "addLiquidity"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blastGasModeContract"
      | "botBuyTimes"
      | "burn"
      | "burnFrom"
      | "buyTaxPercent"
      | "changeTaxPercent"
      | "claimCommunityTax"
      | "claimDevTax"
      | "claimDevToken"
      | "claimGasFee"
      | "communityAddress"
      | "communityPercent"
      | "communityTaxTokenAmountAvailable"
      | "configBlastPointsOperator"
      | "decimals"
      | "devPercent"
      | "devTaxReceiverAddress"
      | "devTaxTokenAmountAvailable"
      | "devTokenAmountClaimable"
      | "devTokenAmountRemain"
      | "devTokenReceiverAddress"
      | "eip712Domain"
      | "excludeFromTaxes"
      | "initPool"
      | "limitEnabled"
      | "liquidityPools"
      | "maxAmountPerAccount"
      | "maxAmountPerTx"
      | "name"
      | "nonces"
      | "owner"
      | "permit"
      | "renounceOwnership"
      | "rescueETH"
      | "rescueToken"
      | "sellTaxPercent"
      | "setCommunityAddress"
      | "setDevAddress"
      | "setExcludeFromTax"
      | "setLimitConfig"
      | "setLimitEnabled"
      | "setLiquidityPool"
      | "setUnlimited"
      | "startPoolTime"
      | "symbol"
      | "totalSupply"
      | "tradeVolume"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "unlimiteds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ClaimGasFee"
      | "EIP712DomainChanged"
      | "OwnershipTransferred"
      | "SetExcludeFromTax"
      | "SetLiquidityPool"
      | "SetUnlimited"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ANTI_BOT_DETECT_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ANTI_BOT_LOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blastGasModeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "botBuyTimes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeTaxPercent",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCommunityTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDevTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDevToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimGasFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "communityAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityTaxTokenAmountAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configBlastPointsOperator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devTaxReceiverAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devTaxTokenAmountAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devTokenAmountClaimable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devTokenAmountRemain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devTokenReceiverAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromTaxes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "limitEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPools",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAmountPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAmountPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCommunityAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAddress",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcludeFromTax",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPool",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnlimited",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startPoolTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlimiteds",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ANTI_BOT_DETECT_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ANTI_BOT_LOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blastGasModeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "botBuyTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyTaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCommunityTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDevTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDevToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityTaxTokenAmountAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configBlastPointsOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devPercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devTaxReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devTaxTokenAmountAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devTokenAmountClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devTokenAmountRemain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devTokenReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAmountPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAmountPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescueToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommunityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcludeFromTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnlimited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPoolTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlimiteds", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimGasFeeEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetExcludeFromTaxEvent {
  export type InputTuple = [account: AddressLike, exclude: boolean];
  export type OutputTuple = [account: string, exclude: boolean];
  export interface OutputObject {
    account: string;
    exclude: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetLiquidityPoolEvent {
  export type InputTuple = [pool: AddressLike, isPool: boolean];
  export type OutputTuple = [pool: string, isPool: boolean];
  export interface OutputObject {
    pool: string;
    isPool: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUnlimitedEvent {
  export type InputTuple = [addr: AddressLike, isUnlimited: boolean];
  export type OutputTuple = [addr: string, isUnlimited: boolean];
  export interface OutputObject {
    addr: string;
    isUnlimited: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SSS extends BaseContract {
  connect(runner?: ContractRunner | null): SSS;
  waitForDeployment(): Promise<this>;

  interface: SSSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ANTI_BOT_DETECT_DURATION: TypedContractMethod<[], [bigint], "view">;

  ANTI_BOT_LOCK_DURATION: TypedContractMethod<[], [bigint], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  addLiquidity: TypedContractMethod<
    [ethAmount: BigNumberish, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  blastGasModeContract: TypedContractMethod<[], [string], "view">;

  botBuyTimes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyTaxPercent: TypedContractMethod<[], [bigint], "view">;

  changeTaxPercent: TypedContractMethod<
    [
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      dev: BigNumberish,
      community: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claimCommunityTax: TypedContractMethod<[], [bigint], "nonpayable">;

  claimDevTax: TypedContractMethod<[], [bigint], "nonpayable">;

  claimDevToken: TypedContractMethod<[], [bigint], "nonpayable">;

  claimGasFee: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  communityAddress: TypedContractMethod<[], [string], "view">;

  communityPercent: TypedContractMethod<[], [bigint], "view">;

  communityTaxTokenAmountAvailable: TypedContractMethod<[], [bigint], "view">;

  configBlastPointsOperator: TypedContractMethod<
    [blastPointAddress: AddressLike, operator: AddressLike],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  devPercent: TypedContractMethod<[], [bigint], "view">;

  devTaxReceiverAddress: TypedContractMethod<[], [string], "view">;

  devTaxTokenAmountAvailable: TypedContractMethod<[], [bigint], "view">;

  devTokenAmountClaimable: TypedContractMethod<[], [bigint], "view">;

  devTokenAmountRemain: TypedContractMethod<[], [bigint], "view">;

  devTokenReceiverAddress: TypedContractMethod<[], [string], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  excludeFromTaxes: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  initPool: TypedContractMethod<
    [ethAmount: BigNumberish, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  limitEnabled: TypedContractMethod<[], [boolean], "view">;

  liquidityPools: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  maxAmountPerAccount: TypedContractMethod<[], [bigint], "view">;

  maxAmountPerTx: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rescueETH: TypedContractMethod<
    [amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  rescueToken: TypedContractMethod<
    [tokenAddress: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sellTaxPercent: TypedContractMethod<[], [bigint], "view">;

  setCommunityAddress: TypedContractMethod<
    [community: AddressLike],
    [void],
    "nonpayable"
  >;

  setDevAddress: TypedContractMethod<
    [devTaxReceiver: AddressLike, devTokenReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setExcludeFromTax: TypedContractMethod<
    [account: AddressLike, exclude: boolean],
    [void],
    "nonpayable"
  >;

  setLimitConfig: TypedContractMethod<
    [_maxAmountPerTx: BigNumberish, _maxAmountPerAccount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLimitEnabled: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  setLiquidityPool: TypedContractMethod<
    [pool: AddressLike, isPool: boolean],
    [void],
    "nonpayable"
  >;

  setUnlimited: TypedContractMethod<
    [addr: AddressLike, _isUnlimited: boolean],
    [void],
    "nonpayable"
  >;

  startPoolTime: TypedContractMethod<[], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradeVolume: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  unlimiteds: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ANTI_BOT_DETECT_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ANTI_BOT_LOCK_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [ethAmount: BigNumberish, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blastGasModeContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "botBuyTimes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyTaxPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeTaxPercent"
  ): TypedContractMethod<
    [
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      dev: BigNumberish,
      community: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimCommunityTax"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claimDevTax"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claimDevToken"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claimGasFee"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "communityAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "communityPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "communityTaxTokenAmountAvailable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "configBlastPointsOperator"
  ): TypedContractMethod<
    [blastPointAddress: AddressLike, operator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devTaxReceiverAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "devTaxTokenAmountAvailable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devTokenAmountClaimable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devTokenAmountRemain"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devTokenReceiverAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "excludeFromTaxes"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "initPool"
  ): TypedContractMethod<
    [ethAmount: BigNumberish, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "limitEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidityPools"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxAmountPerAccount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxAmountPerTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueETH"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueToken"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellTaxPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setCommunityAddress"
  ): TypedContractMethod<[community: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDevAddress"
  ): TypedContractMethod<
    [devTaxReceiver: AddressLike, devTokenReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExcludeFromTax"
  ): TypedContractMethod<
    [account: AddressLike, exclude: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLimitConfig"
  ): TypedContractMethod<
    [_maxAmountPerTx: BigNumberish, _maxAmountPerAccount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLimitEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidityPool"
  ): TypedContractMethod<
    [pool: AddressLike, isPool: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnlimited"
  ): TypedContractMethod<
    [addr: AddressLike, _isUnlimited: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startPoolTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradeVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unlimiteds"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ClaimGasFee"
  ): TypedContractEvent<
    ClaimGasFeeEvent.InputTuple,
    ClaimGasFeeEvent.OutputTuple,
    ClaimGasFeeEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetExcludeFromTax"
  ): TypedContractEvent<
    SetExcludeFromTaxEvent.InputTuple,
    SetExcludeFromTaxEvent.OutputTuple,
    SetExcludeFromTaxEvent.OutputObject
  >;
  getEvent(
    key: "SetLiquidityPool"
  ): TypedContractEvent<
    SetLiquidityPoolEvent.InputTuple,
    SetLiquidityPoolEvent.OutputTuple,
    SetLiquidityPoolEvent.OutputObject
  >;
  getEvent(
    key: "SetUnlimited"
  ): TypedContractEvent<
    SetUnlimitedEvent.InputTuple,
    SetUnlimitedEvent.OutputTuple,
    SetUnlimitedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ClaimGasFee(address,uint256)": TypedContractEvent<
      ClaimGasFeeEvent.InputTuple,
      ClaimGasFeeEvent.OutputTuple,
      ClaimGasFeeEvent.OutputObject
    >;
    ClaimGasFee: TypedContractEvent<
      ClaimGasFeeEvent.InputTuple,
      ClaimGasFeeEvent.OutputTuple,
      ClaimGasFeeEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetExcludeFromTax(address,bool)": TypedContractEvent<
      SetExcludeFromTaxEvent.InputTuple,
      SetExcludeFromTaxEvent.OutputTuple,
      SetExcludeFromTaxEvent.OutputObject
    >;
    SetExcludeFromTax: TypedContractEvent<
      SetExcludeFromTaxEvent.InputTuple,
      SetExcludeFromTaxEvent.OutputTuple,
      SetExcludeFromTaxEvent.OutputObject
    >;

    "SetLiquidityPool(address,bool)": TypedContractEvent<
      SetLiquidityPoolEvent.InputTuple,
      SetLiquidityPoolEvent.OutputTuple,
      SetLiquidityPoolEvent.OutputObject
    >;
    SetLiquidityPool: TypedContractEvent<
      SetLiquidityPoolEvent.InputTuple,
      SetLiquidityPoolEvent.OutputTuple,
      SetLiquidityPoolEvent.OutputObject
    >;

    "SetUnlimited(address,bool)": TypedContractEvent<
      SetUnlimitedEvent.InputTuple,
      SetUnlimitedEvent.OutputTuple,
      SetUnlimitedEvent.OutputObject
    >;
    SetUnlimited: TypedContractEvent<
      SetUnlimitedEvent.InputTuple,
      SetUnlimitedEvent.OutputTuple,
      SetUnlimitedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
